스프링 프레임워크란?
framework -> 설계의 틀

스프링 프로젝트 생성하기
1. 메이븐 프로젝트 생성
mvn archetype:generate
groupId : 프로젝트의 소속
artifactId :  프로젝트명(폴더) - 이 명칭으로 폴더 생성

pom.xml (Project Object Manager) -> 메이븐 설정(의존성, 플러그인)

mvn test : 테스트 수행
mvn package : 배포 파일 생성(war, jar)

2. 메이븐 프로젝트 임포트
3. 메이븐 리포지토리

스프링은 객체 컨테이너
spring-context - Dependency

BeanFactory 인터페이스 - 객체 조회(getBean)

ApplicationContext 인터페이스(추가적인 객체 관리 기능)

AnnotationConfigApplicationContext -> 스프링 컨테이너
- 관리하는 객체를 담고있는 컨테이너 : 객체를 스프링이 관리하기 위해서

IOC(Inversion Of Control) - (객체관리)제어의 역전
- 과거 : 객체를 생성하고 관리하는 주체 -> 개발자
- 스프링 : 객체 생성과 관리의 제어를 개발자 대신 스프링이 해준다.

싱글톤(SingleTon)객체
- 스프링 컨테이너 객체 관리 기능

스프링 DI(Dependency Injection - 의존주입)

1. 의존이란?

애노테이션
1. @Configuration
	: 스프링 관리 객체 설정
		- @Bean 객체정의
		- 의존이 있는 객체를 조립
	- 스프링 컨테이너가 참조하고 관리 객체를 생성하는 설정
	
2. @Bean
	- 스프링 컨테이너가 관리할 객체임을 알려주는 애노테이션
	
3. @Autowired 애노테이션
	- 의존하고 있는 객체를 스프링 컨테이너에게 알려주는 애노테이션
	- 스프링이 관리하고 있는 객체(@Bean)이면 자동 주입
	
4. @Import
	- 설정 클래스가 여러개일때, 설정클래스를 포함시키는 애노테이션
	

getBean 메서드 사용
1. 의존 자동 주입
2. @Autowired 애노테이션을 이용한 의존 자동 주입
	- 멤버변수
	- setter 메서드의 매개변수
	- Optional 자동 주입
	
	- 생성자 매개변수
	
	Optional - Wrapper 클래스
	
	class Optional<t> {
		...
		T value;
		...
	}
	jdk1.8 -> null을 처리하기 위한 편의기능 제공

	java.time.formet 
		-> DateTimeFommatter
3. @Qualifier
4. 일치하는 빈이 없는 경우
5. @Autowired 애노테이션의 required속성
	- required 기본값 : true -> 의존성이 반드시 있어야 정상 동갑
	- 의존하는 빈이 없는 경우는 setter 메서드 호출 X
	
6. @Nullable 애노테이션
	- 의존하는 빈이 없는 경우는 null을 대입
	
@Autowired - required : false
	- 의존하는 빈이 없으면 메서드가 호출 X (setDateTimeFormatter)
@Nullable
	- 의존하는 빈이 없으면 매개변수로 null을 대입해서 메서드는 호출
		setDateTimeFormatter(null);
		
컴포넌트 스캔
1. @Component 애노테이션
2. @ComponentScan 애노테이션
	- 자동 스프링 빈 객체 등록
		-> basePackages=패키지범위
		
	- 특정 애노테이션을 가진 클래스를 스프링 컨테이너 관리 객체로 생성
	- @Component
	- @Controller
	- @Configuration
	- @Service
	- @Repository
	- @Aspect
	...
	
	- @Component, @Service
	
	애노테이션 -> value -> 속성 명시 없이 값을 지정

3. 컴포넌트 스캔에 따른 충돌 처리
	